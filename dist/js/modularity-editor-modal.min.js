!function(t){var o={};function e(i){if(o[i])return o[i].exports;var a=o[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,e),a.l=!0,a.exports}e.m=t,e.c=o,e.d=function(t,o,i){e.o(t,o)||Object.defineProperty(t,o,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,o){if(1&o&&(t=e(t)),8&o)return t;if(4&o&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&o&&"string"!=typeof t)for(var a in t)e.d(i,a,function(o){return t[o]}.bind(null,a));return i},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},e.p="",e(e.s=6)}([function(t,o,e){"use strict";var i=e(2),a=e(1),n=e(3);o.a=function(t){function o(){}return o.prototype.modulePostCreated=function(o){a.a.close();var e=i.a.isEditingModule(),d={action:"get_post",id:o};t.post(ajaxurl,d,(function(t){var o={post_id:t.ID,title:t.post_title};i.a.updateModule(e,o),n.a.save("form")}),"json")},new o}(jQuery)},function(t,o,e){"use strict";o.a=function(t){function o(){this.handleEvents()}return o.prototype.open=function(o){t("body").addClass("modularity-modal-open").append('            <div id="modularity-modal">                <div class="modularity-modal-wrapper">                    <button class="modularity-modal-close" data-modularity-modal-action="close">&times; '+modularityAdminLanguage.close+'</button>                    <div class="modularity-modal-spinner-container" id="modularity-iframe-loader"><span class="modularity-modal-spinner"></span></div>                    <iframe class="modularity-modal-iframe" src="'+o+'" frameborder="0" onload="document.getElementById(\'modularity-iframe-loader\').style.display=\'none\';" allowtransparency></iframe>                </div>            </div>        '),!0},o.prototype.close=function(){t("body").removeClass("modularity-modal-open"),t("#modularity-modal").remove(),!1},o.prototype.handleEvents=function(){t(document).on("click",'[data-modularity-modal-action="close"]',function(t){t.preventDefault(),this.close()}.bind(this))},new o}(jQuery)},function(t,o,e){"use strict";var i=e(0),a=e(5),n=e(1);o.a=function(t){var o={is_thickbox:!0},e=!1;function d(){t(function(){"undefined"!=typeof pagenow&&"admin_page_modularity-editor"==pagenow&&(this.handleEvents(),this.loadModules(modularity_post_id))}.bind(this))}return d.prototype.loadModules=function(o){var e={action:"get_post_modules",id:o};t.post(ajaxurl,e,function(o){t.each(o,function(o,e){var i=t('.modularity-sidebar-area[data-area-id="'+o+'"]');t.each(e.modules,function(o,e){"true"==e.hidden&&(e.hidden=!0);var a=void 0===e.sidebar_incompability||t.isEmptyObject(e.sidebar_incompability)?"":JSON.stringify(e.sidebar_incompability);this.addModule(i,e.post_type,e.post_type_name,e.post_title,e.ID,e.hidden,e.columnWidth,e.isDeprecated,a)}.bind(this)),i.removeClass("modularity-spinner")}.bind(this)),this.initCompleted=!0,t(".modularity-sidebar-area").removeClass("modularity-spinner")}.bind(this),"json")},d.prototype.isEditingModule=function(){return e},d.prototype.getThickBoxUrl=function(e,i){var a="",n={};switch(e){case"add":a="post-new.php";break;case"edit":a="post.php"}return"number"==typeof i.postId&&(n.post=i.postId,n.action="edit"),"string"==typeof i.postType&&(n.post_type=i.postType),admin_url+a+"?"+t.param(n)+"&"+t.param(o)},d.prototype.getImportUrl=function(e){var i={};return i.post_type=e.postType,admin_url+"edit.php?"+t.param(i)+"&"+t.param(o)},d.prototype.addModule=function(o,e,n,d,r,l,s,u,p){d=void 0!==d?": "+d:"",r=void 0!==r?r:"",s=void 0!==s?s:"";var c=!0===u?'<span class="modularity-deprecated" style="color:#ff0000;">('+modularityAdminLanguage.deprecated+")</span>":"";p=void 0!==p?p:"";var m=this.getThickBoxUrl("add",{postType:e});i.a.postAction="add",r&&(m=this.getThickBoxUrl("edit",{postId:r}),i.a.postAction="edit");var y=this.getImportUrl({postType:e}),f="";!0===l&&(f="checked");var h=t(o).data("area-id"),v=a.a.uuid(),b='<li id="post-'+r+'" data-module-id="'+e+'" data-module-stored-width="'+s+"\" data-sidebar-incompability='"+p+'\'>                <span class="modularity-line-wrapper">                    <span class="modularity-sortable-handle"></span>                    <span class="modularity-module-name">                        '+n+"                        "+c+'                        <span class="modularity-module-title">'+d+'</span>                        <label class="modularity-module-hide">                            <input type="checkbox" name="modularity_modules['+h+"]["+v+'][hidden]" value="hidden" '+f+" />                            "+modularityAdminLanguage.langhide+'                        </label>                    </span>                    <span class="modularity-module-columns">                        <label>'+modularityAdminLanguage.width+':</label>                        <select name="modularity_modules['+h+"]["+v+'][columnWidth]">                            '+modularityAdminLanguage.widthOptions+'                        </select>                    </span>                    <span class="modularity-module-actions">                        <a href="'+m+'" data-modularity-modal class="modularity-js-thickbox-open"><span>'+modularityAdminLanguage.langedit+'</span></a>                        <a href="'+y+'" class="modularity-js-thickbox-import"><span>'+modularityAdminLanguage.langimport+'</span></a>                        <a href="#remove" class="modularity-module-remove"><span>'+modularityAdminLanguage.langremove+'</span></a>                    </span>                    <input type="hidden" name="modularity_modules['+h+"]["+v+'][postid]" class="modularity-js-module-id" value="'+r+'" required>                </span>            </li>';t(o).append(b),t(".modularity-sidebar-area > li").each((function(o,e){t(".modularity-module-columns select",t(e)).val(t(e).attr("data-module-stored-width"))})),t(".modularity-js-sortable").sortable("refresh")},d.prototype.updateModule=function(t,o){t.find("a.modularity-js-thickbox-open").attr("href",this.getThickBoxUrl("edit",{postId:o.post_id})),t.find("input.modularity-js-module-id").val(o.post_id).change(),t.find(".modularity-module-title").text(": "+o.title)},d.prototype.removeModule=function(t){confirm(modularityAdminLanguage.actionRemove)&&t.remove()},d.prototype.handleEvents=function(){t(document).on("click",".modularity-module-remove",function(o){o.preventDefault();var e=t(o.target).closest("li");this.removeModule(e)}.bind(this)),t(document).on("click",".modularity-js-thickbox-import",(function(o){o.preventDefault();t(o.target).closest("a");e=t(o.target).closest("li"),i.a.postAction="import",n.a.open(t(o.target).closest("a").attr("href"))})),t(document).on("click",".modularity-js-thickbox-open",function(o){o.preventDefault(),t(o.target).closest("a").attr("href").indexOf("post.php")>-1&&(i.a.postAction="edit"),e=t(o.target).closest("li"),n.a.open(t(o.target).closest("a").attr("href"))}.bind(this))},new d}(jQuery)},function(t,o,e){"use strict";o.a=function(t){function o(){t(function(){}.bind(this))}return o.prototype.save=function(o){t("#modularity-options #publishing-action .spinner").css("visibility","visible");var e=t(o).serializeObject();e.id=modularity_post_id,e.action="save_modules",t.post(ajaxurl,e,(function(o){t("#modularity-options #publishing-action .spinner").css("visibility","hidden")}))},new o}(jQuery)},function(t,o,e){"use strict";var i=e(0),a=e(2),n=e(1);o.a=function(t){var o=!1;function e(){t(function(){t(document).on("click",".modularity-js-thickbox-widget-import-widget",(function(e){e.preventDefault(),o=t(e.target).parents(".widget-inside");var d=a.a.getImportUrl({postType:t(e.target).parents(".widget-inside").find(".modularity-widget-module-type select").val()});a.a.editingModule=t(e.target).closest(".widget-inside"),i.a.postAction="import-widget",n.a.open(d)})),t(document).on("click",".modularity-js-thickbox-open-widget",function(o){o.preventDefault(),t(o.target).closest("a").attr("href").indexOf("post.php")>-1&&(i.a.postAction="edit");t(o.target).closest("li");n.a.open(t(o.target).closest("a").attr("href"))}.bind(this))}.bind(this))}return e.prototype.isEditingWidget=function(){return o},e.prototype.updateWidget=function(o,e){t(o).find(".modularity-widget-module-id-span").html(e.post_id),t(o).find(".modularity-widget-module-id").val(e.post_id),t(o).find(".modularity-widget-module-edit").attr("href","post.php?post="+e.post_id+"&action=edit&is_thickbox=true").removeClass("hidden"),t(o).find(".modularity-widget-module-title-span").html(e.title),t(o).find(".modularity-widget-module-title").val(e.title)},new e}(jQuery)},function(t,o,e){"use strict";o.a=function(t){function o(){t(function(){}.bind(this))}return o.prototype.uuid=function(t){return Math.random().toString(36).substr(2,9)},new o}(jQuery)},function(t,o,e){"use strict";e.r(o);var i,a=e(0),n=e(2),d=e(3),r=e(1),l=e(4);o.default=(i=jQuery,"add"==a.a.postAction&&""==modularity_post_action&&a.a.modulePostCreated(modularity_post_id),"edit-inline-saved"==a.a.postAction&&parent.location.reload(),"edit"==a.a.postAction&&""==modularity_post_action&&jQuery(document).on("click","#publish",(function(t){a.a.postAction="add"})),"edit-inline-not-saved"==a.a.postAction&&jQuery(document).on("click","#publish",(function(t){a.a.postAction="edit-inline-saved"})),"import"==a.a.postAction&&(i('.check-column input[type="checkbox"]').remove(),i(".wp-list-table").addClass("modularity-wp-list-table"),i("tbody .check-column").addClass("modularity-import-column").append('<button class="button modularity-import-button" data-modularity-action="import">Import</button>'),i("#posts-filter").append('<input type="hidden" name="is_thickbox" value="true">'),i(document).on("click",'[data-modularity-action="import"]',(function(t){t.preventDefault();var o=i(t.target).closest("tr").attr("id");o=o.split("-")[1];var e=n.a.isEditingModule(),a={action:"get_post",id:o};i("body").addClass("modularity-loader-takeover"),i.post(ajaxurl,a,(function(t){var o={post_id:t.ID,title:t.post_title};n.a.updateModule(e,o),d.a.save("form"),r.a.close()}),"json")}))),void("import-widget"==a.a.postAction&&(i('.check-column input[type="checkbox"]').remove(),i(".wp-list-table").addClass("modularity-wp-list-table"),i("tbody .check-column").addClass("modularity-import-column").append('<button class="button modularity-import-button" data-modularity-action="import">Import</button>'),i(document).on("click",'[data-modularity-action="import"]',(function(t){t.preventDefault();var o=i(t.target).closest("tr").attr("id");o=o.split("-")[1];var e=l.a.isEditingWidget(),a={action:"get_post",id:o};i("body").addClass("modularity-loader-takeover"),i.post(ajaxurl,a,(function(t){var o={post_id:t.ID,title:t.post_title};l.a.updateWidget(e,o),r.a.close()}),"json")})))))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,