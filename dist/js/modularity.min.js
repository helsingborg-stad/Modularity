!function(t){var e={};function o(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,o),a.l=!0,a.exports}o.m=t,o.c=e,o.d=function(t,e,i){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)o.d(i,a,function(e){return t[e]}.bind(null,a));return i},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=9)}({9:function(t,e,o){"use strict";o.r(e);function i(t){t,$(function(){}.bind(this))}function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}$=jQuery,i.prototype.save=function(t){$("#modularity-options #publishing-action .spinner").css("visibility","visible");var e=$(t).serializeObject();e.id=modularity_post_id,e.action="save_modules",$.post(ajaxurl,e,(function(t){$("#modularity-options #publishing-action .spinner").css("visibility","hidden")}))},jQuery.fn.serializeObject=function(){var t={},e=this.serializeArray();return jQuery.each(e,(function(){void 0!==t[this.name]?(t[this.name].push||(t[this.name]=[t[this.name]]),t[this.name].push(this.value||"")):t[this.name]=this.value||""})),t};var r=null;function n(t){r=t,$(function(){"undefined"!=typeof pagenow&&"admin_page_modularity-editor"==pagenow&&this.init()}.bind(this))}$=jQuery,n.prototype.init=function(){this.setupDraggable(),this.setupDroppable(),this.setupSortable()},n.prototype.setupSortable=function(){$(".modularity-js-sortable").sortable({handle:".modularity-sortable-handle",connectWith:".modularity-js-sortable",placeholder:"ui-sortable-placeholder",start:function(t,e){try{var o=jQuery(e.item).attr("data-sidebar-incompability");(o=JSON.parse(o))&&"object"===a(o)&&jQuery(".modularity-sidebar-area").each((function(t,e){o.includes(jQuery(this).attr("data-area-id"))?jQuery(this).parent().parent().addClass("modularity-incompatible-area"):jQuery(this).parent().parent().removeClass("modularity-incompatible-area")}))}catch(t){console.log("Incompability information not defined - "+t)}},stop:function(t,e){var o=e.item.parents("ul").data("area-id");e.item.find('input[name^="modularity_modules"]').each((function(t,e){var i=$(this).attr("name").replace(/\[(.*?)\]/i,"["+o+"]");$(this).attr("name",i)})),jQuery("[id^=modularity-mb-]").removeClass("modularity-incompatible-area")}}).bind(this)},n.prototype.setupDraggable=function(){$(".modularity-js-draggable").draggable({appendTo:"body",containment:"document",scroll:!1,helper:"clone",revert:"invalid",revertDuration:200,start:function(t,e){try{var o=jQuery(this).attr("data-sidebar-incompability");(o=JSON.parse(o))&&"object"===a(o)&&jQuery(".modularity-sidebar-area").each((function(t,e){o.includes(jQuery(this).attr("data-area-id"))?jQuery(this).parent().parent().addClass("modularity-incompatible-area"):jQuery(this).parent().parent().removeClass("modularity-incompatible-area")}))}catch(t){console.log("Incompability information not defined - "+t)}},stop:function(t,e){jQuery("[id^=modularity-mb-]").removeClass("modularity-incompatible-area")}})},n.prototype.setupDroppable=function(){$(".modularity-js-droppable").droppable({accept:".modularity-js-draggable",hoverClass:"modularity-state-droppable",drop:function(t,e){this.appendModule(t,e)}.bind(this)}).bind(this)},n.prototype.appendModule=function(t,e){var o=e.draggable,i=o.find(".modularity-module-name").text(),a=o.data("module-id"),n=o.attr("data-sidebar-incompability");r.Editor.Module.addModule(t.target,a,i,void 0,void 0,void 0,void 0,void 0,n)};var d=null;$=jQuery;var l={is_thickbox:!0},s=!1;function u(t){d=t,$(function(){"undefined"!=typeof pagenow&&"admin_page_modularity-editor"==pagenow&&(this.handleEvents(),this.loadModules(modularity_post_id))}.bind(this))}u.prototype.loadModules=function(t){var e={action:"get_post_modules",id:t};$.post(ajaxurl,e,function(t){$.each(t,function(t,e){var o=$('.modularity-sidebar-area[data-area-id="'+t+'"]');$.each(e.modules,function(t,e){"true"==e.hidden&&(e.hidden=!0);var i=void 0===e.sidebar_incompability||$.isEmptyObject(e.sidebar_incompability)?"":JSON.stringify(e.sidebar_incompability);this.addModule(o,e.post_type,e.post_type_name,e.post_title,e.ID,e.hidden,e.columnWidth,e.isDeprecated,i)}.bind(this)),o.removeClass("modularity-spinner")}.bind(this)),!0,$(".modularity-sidebar-area").removeClass("modularity-spinner")}.bind(this),"json")},u.prototype.isEditingModule=function(){return s},u.prototype.getThickBoxUrl=function(t,e){var o="",i={};switch(t){case"add":o="post-new.php";break;case"edit":o="post.php"}return"number"==typeof e.postId&&(i.post=e.postId,i.action="edit"),"string"==typeof e.postType&&(i.post_type=e.postType),admin_url+o+"?"+$.param(i)+"&"+$.param(l)},u.prototype.getImportUrl=function(t){var e={};return e.post_type=t.postType,admin_url+"edit.php?"+$.param(e)+"&"+$.param(l)},u.prototype.addModule=function(t,e,o,i,a,r,n,l,s){i=void 0!==i?": "+i:"",a=void 0!==a?a:"",n=void 0!==n?n:"";var u=!0===l?'<span class="modularity-deprecated" style="color:#ff0000;">('+modularityAdminLanguage.deprecated+")</span>":"";s=void 0!==s?s:"";var p=this.getThickBoxUrl("add",{postType:e});d.Editor.Thickbox.postAction="add",a&&(p=this.getThickBoxUrl("edit",{postId:a}),d.Editor.Thickbox.postAction="edit");var c=this.getImportUrl({postType:e}),m="";!0===r&&(m="checked");var y=$(t).data("area-id"),f=Math.random().toString(36).substr(2,9),h='<li id="post-'+a+'" data-module-id="'+e+'" data-module-stored-width="'+n+"\" data-sidebar-incompability='"+s+'\'>            <span class="modularity-line-wrapper">                <span class="modularity-sortable-handle"></span>                <span class="modularity-module-name">                    '+o+"                    "+u+'                    <span class="modularity-module-title">'+i+'</span>                    <label class="modularity-module-hide">                        <input type="checkbox" name="modularity_modules['+y+"]["+f+'][hidden]" value="hidden" '+m+" />                        "+modularityAdminLanguage.langhide+'                    </label>                </span>                <span class="modularity-module-columns">                    <label>'+modularityAdminLanguage.width+':</label>                    <select name="modularity_modules['+y+"]["+f+'][columnWidth]">                        '+modularityAdminLanguage.widthOptions+'                    </select>                </span>                <span class="modularity-module-actions">                    <a href="'+p+'" data-modularity-modal class="modularity-js-thickbox-open"><span>'+modularityAdminLanguage.langedit+'</span></a>                    <a href="'+c+'" class="modularity-js-thickbox-import"><span>'+modularityAdminLanguage.langimport+'</span></a>                    <a href="#remove" class="modularity-module-remove"><span>'+modularityAdminLanguage.langremove+'</span></a>                </span>                <input type="hidden" name="modularity_modules['+y+"]["+f+'][postid]" class="modularity-js-module-id" value="'+a+'" required>            </span>        </li>';$(t).append(h),$(".modularity-sidebar-area > li").each((function(t,e){$(".modularity-module-columns select",$(e)).val($(e).attr("data-module-stored-width"))})),$(".modularity-js-sortable").sortable("refresh")},u.prototype.updateModule=function(t,e){t.find("a.modularity-js-thickbox-open").attr("href",this.getThickBoxUrl("edit",{postId:e.post_id})),t.find("input.modularity-js-module-id").val(e.post_id).change(),t.find(".modularity-module-title").text(": "+e.title)},u.prototype.removeModule=function(t){confirm(modularityAdminLanguage.actionRemove)&&t.remove()},u.prototype.handleEvents=function(){$(document).on("click",".modularity-module-remove",function(t){t.preventDefault();var e=$(t.target).closest("li");this.removeModule(e)}.bind(this)),$(document).on("click",".modularity-js-thickbox-import",(function(t){t.preventDefault();$(t.target).closest("a");s=$(t.target).closest("li"),d.Editor.Thickbox.postAction="import",d.Prompt.Modal.open($(t.target).closest("a").attr("href"))})),$(document).on("click",".modularity-js-thickbox-open",function(t){t.preventDefault(),$(t.target).closest("a").attr("href").indexOf("post.php")>-1&&(d.Editor.Thickbox.postAction="edit"),s=$(t.target).closest("li"),d.Prompt.Modal.open($(t.target).closest("a").attr("href"))}.bind(this))};var p=null;function c(t){p=t}$=jQuery,c.prototype.modulePostCreated=function(t){p.Prompt.Modal.close();var e=parent.Modularity.Editor.Module.isEditingModule(),o={action:"get_post",id:t};$.post(ajaxurl,o,(function(t){var o={post_id:t.ID,title:t.post_title};p.Editor.Module.updateModule(e,o),p.Editor.Autosave.save("form")}),"json")};$=jQuery;var m=!1;function y(t){t,this.handleEvents()}y.prototype.run=function(){m=!1,this.checkRequired()},y.prototype.checkRequired=function(){var t=$("[required]");t.removeClass("validation-error"),t.each(function(t,e){0===$(e).val().length&&($(e).parents("li").addClass("validation-error"),$(e).one("change",(function(t){$(t.target).parents("li").removeClass("validation-error")})),m=!0)}.bind(this))},y.prototype.handleEvents=function(){$(document).on("click","#modularity-mb-editor-publish #publish",function(t){return this.run(),!m||($("#modularity-mb-editor-publish .spinner").css("visibility","hidden"),!1)}.bind(this))};function f(t){t,$(function(){}.bind(this))}$=jQuery,f.prototype.uuid=function(t){return Math.random().toString(36).substr(2,9)};var h=!1;function b(t){$(function(){t,$(document).on("click",".modularity-js-thickbox-widget-import-widget",(function(e){e.preventDefault(),h=$(e.target).parents(".widget-inside");var o=t.Editor.Module.getImportUrl({postType:$(e.target).parents(".widget-inside").find(".modularity-widget-module-type select").val()});t.Editor.Module.editingModule=$(e.target).closest(".widget-inside"),t.Editor.Thickbox.postAction="import-widget",t.Prompt.Modal.open(o)})),$(document).on("click",".modularity-js-thickbox-open-widget",function(e){e.preventDefault(),$(e.target).closest("a").attr("href").indexOf("post.php")>-1&&(t.Editor.Thickbox.postAction="edit"),editingModule=$(e.target).closest("li"),t.Prompt.Modal.open($(e.target).closest("a").attr("href"))}.bind(this))}.bind(this))}$=jQuery,b.prototype.isEditingWidget=function(){return h},b.prototype.updateWidget=function(t,e){$(t).find(".modularity-widget-module-id-span").html(e.post_id),$(t).find(".modularity-widget-module-id").val(e.post_id),$(t).find(".modularity-widget-module-edit").attr("href","post.php?post="+e.post_id+"&action=edit&is_thickbox=true").removeClass("hidden"),$(t).find(".modularity-widget-module-title-span").html(e.title),$(t).find(".modularity-widget-module-title").val(e.title)};function v(t){t,this.handleEvents()}if($=jQuery,v.prototype.open=function(t){$("body").addClass("modularity-modal-open").append('        <div id="modularity-modal">            <div class="modularity-modal-wrapper">                <button class="modularity-modal-close" data-modularity-modal-action="close">&times; '+modularityAdminLanguage.close+'</button>                <div class="modularity-modal-spinner-container" id="modularity-iframe-loader"><span class="modularity-modal-spinner"></span></div>                <iframe class="modularity-modal-iframe" src="'+t+'" frameborder="0" onload="document.getElementById(\'modularity-iframe-loader\').style.display=\'none\';" allowtransparency></iframe>            </div>        </div>    '),!0},v.prototype.close=function(){$("body").removeClass("modularity-modal-open"),$("#modularity-modal").remove(),!1},v.prototype.handleEvents=function(){$(document).on("click",'[data-modularity-modal-action="close"]',function(t){t.preventDefault(),this.close()}.bind(this))},!parent.Modularity){var g=parent.Modularity||{};g.Editor=g.Editor||{},g.Editor.Autosave=new i(g),g.Editor.DragAndDrop=new n(g),g.Editor.Module=new u(g),g.Editor.Thickbox=new c(g),g.Editor.Validate=new y(g),g.Helpers=g.Helpers||{},g.Helpers.Helpers=new f(g),g.Helpers.Widget=new b(g),g.Prompt=g.Prompt||{},g.Prompt.Modal=new v(g),parent.Modularity=g,function(t){t('input[type="checkbox"].sidebar-area-activator').on("click",(function(e){var o=t(this).is(":checked"),i=t(this).attr("value");e.shiftKey&&(o?t('input.sidebar-area-activator[type="checkbox"][value="'+i+'"]').attr("checked",!0):t('input.sidebar-area-activator[type="checkbox"][value="'+i+'"]').attr("checked",!1))}))}(jQuery),function(t){t("#modularity-options #publish").on("click",(function(){t(this).siblings(".spinner").css("visibility","visible")})),t('a.wp-first-item[href="admin.php?page=modularity"]').parent("li").remove(),t("#modularity-tabs a").on("click",(function(e){return wp.autosave&&(t(window).unbind(),wp.autosave.server.triggerSave(),t(document).ajaxComplete((function(){return!0}))),!0}))}(jQuery),jQuery(document).ready((function(t){if(t("#modularity-mb-modules").length){var e=t("#modularity-mb-modules").offset();t(document).scroll((function(){t(window).scrollTop()+50>e.top&&!t("#modularity-mb-modules").hasClass("is-fixed")?t("#modularity-mb-modules").addClass("is-fixed"):t(window).scrollTop()+50<e.top&&t("#modularity-mb-modules").hasClass("is-fixed")&&t("#modularity-mb-modules").removeClass("is-fixed")}))}t(".modularity-edit-module a").on("click",(function(e){e.preventDefault(),g.Editor.Thickbox.postAction="edit-inline-not-saved",g.Prompt.Modal.open(t(e.target).closest("a").attr("href"))}))})),jQuery(document).ready((function(t){t(".frontend-filter").hide(),"post"!==t("#modularity-latest-post-type select").val()&&"page"!==t("#modularity-latest-post-type select").val()||t(".frontend-filter").show(),t("body").on("change","#modularity-latest-post-type select",(function(){"post"===t("#modularity-latest-post-type select").val()||"page"===t("#modularity-latest-post-type select").val()?t(".frontend-filter").show():t(".frontend-filter").hide()})).trigger("change")}))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,