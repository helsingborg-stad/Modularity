!function(t){var e={};function o(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,o),a.l=!0,a.exports}o.m=t,o.c=e,o.d=function(t,e,i){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)o.d(i,a,function(e){return t[e]}.bind(null,a));return i},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=11)}([function(t,e,o){"use strict";var i=o(2),a=o(1),n=o(3);e.a=function(t){function e(){}return e.prototype.modulePostCreated=function(e){a.a.close();var o=i.a.isEditingModule(),r={action:"get_post",id:e};t.post(ajaxurl,r,(function(t){var e={post_id:t.ID,title:t.post_title};i.a.updateModule(o,e),n.a.save("form")}),"json")},new e}(jQuery)},function(t,e,o){"use strict";e.a=function(t){function e(){this.handleEvents()}return e.prototype.open=function(e){t("body").addClass("modularity-modal-open").append('            <div id="modularity-modal">                <div class="modularity-modal-wrapper">                    <button class="modularity-modal-close" data-modularity-modal-action="close">&times; '+modularityAdminLanguage.close+'</button>                    <div class="modularity-modal-spinner-container" id="modularity-iframe-loader"><span class="modularity-modal-spinner"></span></div>                    <iframe class="modularity-modal-iframe" src="'+e+'" frameborder="0" onload="document.getElementById(\'modularity-iframe-loader\').style.display=\'none\';" allowtransparency></iframe>                </div>            </div>        '),!0},e.prototype.close=function(){t("body").removeClass("modularity-modal-open"),t("#modularity-modal").remove(),!1},e.prototype.handleEvents=function(){t(document).on("click",'[data-modularity-modal-action="close"]',function(t){t.preventDefault(),this.close()}.bind(this))},new e}(jQuery)},function(t,e,o){"use strict";var i=o(0),a=o(5),n=o.n(a),r=o(1);e.a=function(t){var e={is_thickbox:!0},o=!1;function a(){t(function(){"undefined"!=typeof pagenow&&"admin_page_modularity-editor"==pagenow&&(this.handleEvents(),this.loadModules(modularity_post_id))}.bind(this))}return a.prototype.loadModules=function(e){var o={action:"get_post_modules",id:e};t.post(ajaxurl,o,function(e){t.each(e,function(e,o){var i=t('.modularity-sidebar-area[data-area-id="'+e+'"]');t.each(o.modules,function(e,o){"true"==o.hidden&&(o.hidden=!0);var a=void 0===o.sidebar_incompability||t.isEmptyObject(o.sidebar_incompability)?"":JSON.stringify(o.sidebar_incompability);this.addModule(i,o.post_type,o.post_type_name,o.post_title,o.ID,o.hidden,o.columnWidth,o.isDeprecated,a)}.bind(this)),i.removeClass("modularity-spinner")}.bind(this)),this.initCompleted=!0,t(".modularity-sidebar-area").removeClass("modularity-spinner")}.bind(this),"json")},a.prototype.isEditingModule=function(){return o},a.prototype.getThickBoxUrl=function(o,i){var a="",n={};switch(o){case"add":a="post-new.php";break;case"edit":a="post.php"}return"number"==typeof i.postId&&(n.post=i.postId,n.action="edit"),"string"==typeof i.postType&&(n.post_type=i.postType),admin_url+a+"?"+t.param(n)+"&"+t.param(e)},a.prototype.getImportUrl=function(o){var i={};return i.post_type=o.postType,admin_url+"edit.php?"+t.param(i)+"&"+t.param(e)},a.prototype.addModule=function(e,o,a,r,d,l,s,u,p){r=void 0!==r?": "+r:"",d=void 0!==d?d:"",s=void 0!==s?s:"",deprecated=!0===u?'<span class="modularity-deprecated" style="color:#ff0000;">('+modularityAdminLanguage.deprecated+")</span>":"",p=void 0!==p?p:"";var c=this.getThickBoxUrl("add",{postType:o});i.a.postAction="add",d&&(c=this.getThickBoxUrl("edit",{postId:d}),i.a.postAction="edit");var m=this.getImportUrl({postType:o}),y="";!0===l&&(y="checked");var f=t(e).data("area-id"),b=n.a.uuid(),h='<li id="post-'+d+'" data-module-id="'+o+'" data-module-stored-width="'+s+"\" data-sidebar-incompability='"+p+'\'>                <span class="modularity-line-wrapper">                    <span class="modularity-sortable-handle"></span>                    <span class="modularity-module-name">                        '+a+"                        "+deprecated+'                        <span class="modularity-module-title">'+r+'</span>                        <label class="modularity-module-hide">                            <input type="checkbox" name="modularity_modules['+f+"]["+b+'][hidden]" value="hidden" '+y+" />                            "+modularityAdminLanguage.langhide+'                        </label>                    </span>                    <span class="modularity-module-columns">                        <label>'+modularityAdminLanguage.width+':</label>                        <select name="modularity_modules['+f+"]["+b+'][columnWidth]">                            '+modularityAdminLanguage.widthOptions+'                        </select>                    </span>                    <span class="modularity-module-actions">                        <a href="'+c+'" data-modularity-modal class="modularity-js-thickbox-open"><span>'+modularityAdminLanguage.langedit+'</span></a>                        <a href="'+m+'" class="modularity-js-thickbox-import"><span>'+modularityAdminLanguage.langimport+'</span></a>                        <a href="#remove" class="modularity-module-remove"><span>'+modularityAdminLanguage.langremove+'</span></a>                    </span>                    <input type="hidden" name="modularity_modules['+f+"]["+b+'][postid]" class="modularity-js-module-id" value="'+d+'" required>                </span>            </li>';t(e).append(h),t(".modularity-sidebar-area > li").each((function(e,o){t(".modularity-module-columns select",t(o)).val(t(o).attr("data-module-stored-width"))})),t(".modularity-js-sortable").sortable("refresh")},a.prototype.updateModule=function(t,e){t.find("a.modularity-js-thickbox-open").attr("href",this.getThickBoxUrl("edit",{postId:e.post_id})),t.find("input.modularity-js-module-id").val(e.post_id).change(),t.find(".modularity-module-title").text(": "+e.title)},a.prototype.removeModule=function(t){confirm(modularityAdminLanguage.actionRemove)&&t.remove()},a.prototype.handleEvents=function(){t(document).on("click",".modularity-module-remove",function(e){e.preventDefault();var o=t(e.target).closest("li");this.removeModule(o)}.bind(this)),t(document).on("click",".modularity-js-thickbox-import",(function(e){e.preventDefault();t(e.target).closest("a");o=t(e.target).closest("li"),i.a.postAction="import",r.a.open(t(e.target).closest("a").attr("href"))})),t(document).on("click",".modularity-js-thickbox-open",function(e){e.preventDefault(),t(e.target).closest("a").attr("href").indexOf("post.php")>-1&&(i.a.postAction="edit"),o=t(e.target).closest("li"),r.a.open(t(e.target).closest("a").attr("href"))}.bind(this))},new a}(jQuery)},function(t,e,o){"use strict";e.a=function(t){function e(){t(function(){}.bind(this))}return e.prototype.save=function(e){t("#modularity-options #publishing-action .spinner").css("visibility","visible");var o=t(e).serializeObject();o.id=modularity_post_id,o.action="save_modules",t.post(ajaxurl,o,(function(e){t("#modularity-options #publishing-action .spinner").css("visibility","hidden")}))},new e}(jQuery)},function(t,e,o){"use strict";var i=o(0),a=o(2),n=o(1);e.a=function(t){var e=!1;function o(){t(function(){t(document).on("click",".modularity-js-thickbox-widget-import-widget",(function(o){o.preventDefault(),e=t(o.target).parents(".widget-inside");var r=a.a.getImportUrl({postType:t(o.target).parents(".widget-inside").find(".modularity-widget-module-type select").val()});a.a.editingModule=t(o.target).closest(".widget-inside"),i.a.postAction="import-widget",n.a.open(r)})),t(document).on("click",".modularity-js-thickbox-open-widget",function(e){e.preventDefault(),t(e.target).closest("a").attr("href").indexOf("post.php")>-1&&(i.a.postAction="edit");t(e.target).closest("li");n.a.open(t(e.target).closest("a").attr("href"))}.bind(this))}.bind(this))}return o.prototype.isEditingWidget=function(){return e},o.prototype.updateWidget=function(e,o){t(e).find(".modularity-widget-module-id-span").html(o.post_id),t(e).find(".modularity-widget-module-id").val(o.post_id),t(e).find(".modularity-widget-module-edit").attr("href","post.php?post="+o.post_id+"&action=edit&is_thickbox=true").removeClass("hidden"),t(e).find(".modularity-widget-module-title-span").html(o.title),t(e).find(".modularity-widget-module-title").val(o.title)},new o}(jQuery)},function(t,e){t.exports((function(t){function e(){t(function(){}.bind(this))}return e.prototype.uuid=function(t){return Math.random().toString(36).substr(2,9)},new e}))(jQuery)},function(t,e,o){"use strict";o.r(e);var i,a=o(0),n=o(2),r=o(3),d=o(1),l=o(4);e.default=(i=jQuery,"add"==a.a.postAction&&""==modularity_post_action&&a.a.modulePostCreated(modularity_post_id),"edit-inline-saved"==a.a.postAction&&parent.location.reload(),"edit"==a.a.postAction&&""==modularity_post_action&&jQuery(document).on("click","#publish",(function(t){a.a.postAction="add"})),"edit-inline-not-saved"==a.a.postAction&&jQuery(document).on("click","#publish",(function(t){a.a.postAction="edit-inline-saved"})),"import"==a.a.postAction&&(i('.check-column input[type="checkbox"]').remove(),i(".wp-list-table").addClass("modularity-wp-list-table"),i("tbody .check-column").addClass("modularity-import-column").append('<button class="button modularity-import-button" data-modularity-action="import">Import</button>'),i("#posts-filter").append('<input type="hidden" name="is_thickbox" value="true">'),i(document).on("click",'[data-modularity-action="import"]',(function(t){t.preventDefault();var e=i(t.target).closest("tr").attr("id");e=e.split("-")[1];var o=n.a.isEditingModule(),a={action:"get_post",id:e};i("body").addClass("modularity-loader-takeover"),i.post(ajaxurl,a,(function(t){var e={post_id:t.ID,title:t.post_title};n.a.updateModule(o,e),r.a.save("form"),d.a.close()}),"json")}))),void("import-widget"==a.a.postAction&&(i('.check-column input[type="checkbox"]').remove(),i(".wp-list-table").addClass("modularity-wp-list-table"),i("tbody .check-column").addClass("modularity-import-column").append('<button class="button modularity-import-button" data-modularity-action="import">Import</button>'),i(document).on("click",'[data-modularity-action="import"]',(function(t){t.preventDefault();var e=i(t.target).closest("tr").attr("id");e=e.split("-")[1];var o=l.a.isEditingWidget(),a={action:"get_post",id:e};i("body").addClass("modularity-loader-takeover"),i.post(ajaxurl,a,(function(t){var e={post_id:t.ID,title:t.post_title};l.a.updateWidget(o,e),d.a.close()}),"json")})))))},function(t,e,o){"use strict";(function(t){var e=o(2);function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}t.exports((function(t){function o(){t(function(){"undefined"!=typeof pagenow&&"admin_page_modularity-editor"==pagenow&&this.init()}.bind(this))}return o.prototype.init=function(){this.setupDraggable(),this.setupDroppable(),this.setupSortable()},o.prototype.setupSortable=function(){t(".modularity-js-sortable").sortable({handle:".modularity-sortable-handle",connectWith:".modularity-js-sortable",placeholder:"ui-sortable-placeholder",start:function(t,e){try{var o=jQuery(e.item).attr("data-sidebar-incompability");(o=JSON.parse(o))&&"object"===i(o)&&jQuery(".modularity-sidebar-area").each((function(t,e){o.includes(jQuery(this).attr("data-area-id"))?jQuery(this).parent().parent().addClass("modularity-incompatible-area"):jQuery(this).parent().parent().removeClass("modularity-incompatible-area")}))}catch(t){console.log("Incompability information not defined - "+t)}},stop:function(e,o){var i=o.item.parents("ul").data("area-id");o.item.find('input[name^="modularity_modules"]').each((function(e,o){var a=t(this).attr("name").replace(/\[(.*?)\]/i,"["+i+"]");t(this).attr("name",a)})),jQuery("[id^=modularity-mb-]").removeClass("modularity-incompatible-area")}}).bind(this)},o.prototype.setupDraggable=function(){t(".modularity-js-draggable").draggable({appendTo:"body",containment:"document",scroll:!1,helper:"clone",revert:"invalid",revertDuration:200,start:function(t,e){try{var o=jQuery(this).attr("data-sidebar-incompability");(o=JSON.parse(o))&&"object"===i(o)&&jQuery(".modularity-sidebar-area").each((function(t,e){o.includes(jQuery(this).attr("data-area-id"))?jQuery(this).parent().parent().addClass("modularity-incompatible-area"):jQuery(this).parent().parent().removeClass("modularity-incompatible-area")}))}catch(t){console.log("Incompability information not defined - "+t)}},stop:function(t,e){jQuery("[id^=modularity-mb-]").removeClass("modularity-incompatible-area")}})},o.prototype.setupDroppable=function(){t(".modularity-js-droppable").droppable({accept:".modularity-js-draggable",hoverClass:"modularity-state-droppable",drop:function(t,e){this.appendModule(t,e)}.bind(this)}).bind(this)},o.prototype.appendModule=function(t,o){var i=o.draggable,a=i.find(".modularity-module-name").text(),n=i.data("module-id"),r=i.attr("data-sidebar-incompability");e.a.addModule(t.target,n,a,void 0,void 0,void 0,void 0,void 0,r)},new o}))(jQuery)}).call(this,o(8)(t))},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},,,function(t,e,o){"use strict";o.r(e);o(6),o(3),o(7),o(2);var i,a=o(0),n=(o(5),jQuery.fn.serializeObject=function(){var t={},e=this.serializeArray();return jQuery.each(e,(function(){void 0!==t[this.name]?(t[this.name].push||(t[this.name]=[t[this.name]]),t[this.name].push(this.value||"")):t[this.name]=this.value||""})),t},o(4),o(1));e.default=void(i=jQuery)('input[type="checkbox"].sidebar-area-activator').on("click",(function(t){var e=i(this).is(":checked"),o=i(this).attr("value");t.shiftKey&&(e?i('input.sidebar-area-activator[type="checkbox"][value="'+o+'"]').attr("checked",!0):i('input.sidebar-area-activator[type="checkbox"][value="'+o+'"]').attr("checked",!1))}));!function(t){t("#modularity-options #publish").on("click",(function(){t(this).siblings(".spinner").css("visibility","visible")})),t('a.wp-first-item[href="admin.php?page=modularity"]').parent("li").remove(),t("#modularity-tabs a").on("click",(function(e){return wp.autosave&&(t(window).unbind(),wp.autosave.server.triggerSave(),t(document).ajaxComplete((function(){return!0}))),!0}))}(jQuery),jQuery(document).ready((function(t){if(t("#modularity-mb-modules").length){var e=t("#modularity-mb-modules").offset();t(document).scroll((function(){t(window).scrollTop()+50>e.top&&!t("#modularity-mb-modules").hasClass("is-fixed")?t("#modularity-mb-modules").addClass("is-fixed"):t(window).scrollTop()+50<e.top&&t("#modularity-mb-modules").hasClass("is-fixed")&&t("#modularity-mb-modules").removeClass("is-fixed")}))}t(".modularity-edit-module a").on("click",(function(e){e.preventDefault(),a.a.postAction="edit-inline-not-saved",n.a.open(t(e.target).closest("a").attr("href"))}))})),jQuery(document).ready((function(t){t(".frontend-filter").hide(),"post"!==t("#modularity-latest-post-type select").val()&&"page"!==t("#modularity-latest-post-type select").val()||t(".frontend-filter").show(),t("body").on("change","#modularity-latest-post-type select",(function(){"post"===t("#modularity-latest-post-type select").val()||"page"===t("#modularity-latest-post-type select").val()?t(".frontend-filter").show():t(".frontend-filter").hide()})).trigger("change")}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,