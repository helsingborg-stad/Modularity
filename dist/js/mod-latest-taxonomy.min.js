!function(t){var e={};function o(a){if(e[a])return e[a].exports;var l=e[a]={i:a,l:!1,exports:{}};return t[a].call(l.exports,l,l.exports,o),l.l=!0,l.exports}o.m=t,o.c=e,o.d=function(t,e,a){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(o.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var l in t)o.d(a,l,function(e){return t[e]}.bind(null,l));return a},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=3)}({3:function(t,e){jQuery(document).ready((function(t){function e(e){0===t('#modularity-sorted-by select optgroup[label="Post fields"]').length&&t("#modularity-sorted-by select").prepend('<optgroup label="Post fields">').append("</optgroup>"),t.post(ajaxurl,e,(function(e){t('#modularity-sorted-by select option[value^="_metakey_"], #modularity-sorted-by select optgroup[label="Post meta"]').remove(),e.meta_keys.length>0&&(t("#modularity-sorted-by select").append('<optgroup label="Post meta">'),t.each(e.meta_keys,(function(o,a){var l="";null!==e.curr&&(l=a.meta_key==e.curr.replace("_metakey_","")?"selected":""),t("#modularity-sorted-by select").append('<option value="_metakey_'+a.meta_key+'" '+l+">"+a.meta_key+"</option>")})),t("#modularity-sorted-by select").append("</optgroup>"))}),"json")}function o(e){t("#modularity-latest-taxonomy select").empty(),t("#modularity-latest-taxonomy .acf-label label").prepend('<span class="spinner" style="visibility: visible; float: none; margin: 0 5px 0 0;"></span>'),t.post(ajaxurl,e,(function(e){0!==e.types.length?(t.each(e.types,(function(o,a){var l="";null!==e.curr&&(l=a.name==e.curr?"selected":""),t("#modularity-latest-taxonomy select").append('<option value="'+a.name+'" '+l+">"+a.label+"</option>")})),t("#modularity-latest-taxonomy .acf-label label .spinner").remove(),a({action:"get_taxonomy_values",tax:t("#modularity-latest-taxonomy select").val(),post:modularity_current_post_id})):t("#modularity-latest-taxonomy .acf-label label .spinner").remove()}),"json")}function a(e){t("#modularity-latest-taxonomy-value select").empty(),t("#modularity-latest-taxonomy-value .acf-label label").prepend('<span class="spinner" style="visibility: visible; float: none; margin: 0 5px 0 0;"></span>'),t.post(ajaxurl,e,(function(e){t.each(e.tax,(function(o,a){var l=t.inArray(a.name.replace("&amp;","&"),e.curr)>-1?"selected":"";t("#modularity-latest-taxonomy-value select").append('<option value="'+a.name+'" '+l+">"+a.name+"</option>")})),t("#modularity-latest-taxonomy-value .acf-label label .spinner").remove()}),"json")}e({action:"get_sortable_meta_keys",posttype:t("#modularity-latest-post-type select").val(),post:modularity_current_post_id}),t("#modularity-latest-post-type select").on("change",(function(){e({action:"get_sortable_meta_keys",posttype:t(this).val(),post:modularity_current_post_id})})),o({action:"get_taxonomy_types",posttype:t("#modularity-latest-post-type select").val(),post:modularity_current_post_id}),t("#modularity-latest-post-type select").on("change",(function(){o({action:"get_taxonomy_types",posttype:t(this).val(),post:modularity_current_post_id})})),t("#modularity-latest-taxonomy select").on("change",(function(){a({action:"get_taxonomy_values",tax:t(this).val(),post:modularity_current_post_id})}))}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,